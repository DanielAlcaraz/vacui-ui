---
title: Checkbox
description: Set of Angular directives to build a Checkbox using Vacui UI primitives.
group: Directives
slug: checkbox
---

<script lang="ts">
import { CodeHighlightComponent } from '../../../app/components/code/code.component' with { analog: 'imports' };
import { AnatomyComponent } from '../../../app/components/anatomy/anatomy.component' with { analog: 'imports' };
import { BadgeComponent } from '../../../app/components/badge/badge.component' with { analog: 'imports' };
import { TableComponent } from '../../../app/components/table/table.component' with { analog: 'imports' };
import { ExampleComponent } from '../../../app/components/example/example.component' with { analog: 'imports' };

// ------ ANATOMY ------
const componentStructure = {
  name: 'vacCheckboxRoot',
  children: [
    { name: 'vacCheckboxInput' },
  ]
};

// ------ COLUMNS ------
const columnsInput = [
  { header: 'Input', field: 'prop' },
  { header: 'Default', field: 'default' },
  { header: 'Type', field: 'type' },
  { header: 'Required', field: 'required' }
];

const outputColumns = [
  { header: 'Output', field: 'prop' },
  { header: 'Description', field: 'description' },
  { header: 'Returns', field: 'returns', widthFactor: 2  },
];

const attributesColumns = [
  { header: 'Attribute', field: 'attribute' },
  { header: 'Value', field: 'value', widthFactor: 3 },
];

const totalColumns = 4;

// ------ ROWS ROOT ------
const rootInputRows = [
  { id: 1, prop: 'checked', default: '—', type: 'boolean | "indeterminate"', required: 'false' },
  { id: 2, prop: 'disabled', default: '—', type: 'boolean', required: 'false' },
  { id: 3, prop: 'required', default: '—', type: 'boolean', required: 'false' },
  { id: 4, prop: 'name', default: '—', type: 'string', required: 'false' },
  { id: 5, prop: 'value', default: 'on', type: 'string', required: 'false' },
];

const rootOutputRows = [
  { id: 1, prop: 'checkedChange', description: 'Event handler called when the state of the checkbox changes.', returns: 'boolean | "indeterminate"' },
];

const rootAttrRows = [
  { id: 1, attribute: 'data-state', value: '"checked" | "unchecked" | "indeterminate"' },
  { id: 2, attribute: 'data-disabled', value: 'Shows when disabled' },
];

// ------ ROWS INPUT ------
const inputAttrRows = [
  { id: 1, attribute: 'data-state', value: '"checked" | "unchecked" | "indeterminate"' },
  { id: 2, attribute: 'data-disabled', value: 'Shows when disabled' },
];

// ------ STATE ------
const stateVarsColumns = [
  { header: 'Name', field: 'name' },
  { header: 'Type', field: 'type' },
  { header: 'Default', field: 'default' },
];

const stateMethodsColumns = [
  { header: 'Method', field: 'method' },
  { header: 'Arguments', field: 'arguments' },
  { header: 'Return', field: 'return' },
];

const stateRows = [
  { id: 1, name: 'checked', default: 'false', type: 'WritableSignal<boolean | "indeterminate">' },
  { id: 2, name: 'disabled', default: 'false', type: 'WritableSignal<boolean>' },
  { id: 3, name: 'required', default: 'false', type: 'WritableSignal<boolean>' },
  { id: 4, name: 'name', default: '—', type: 'WritableSignal<string>' },
  { id: 5, name: 'value', default: 'on', type: 'WritableSignal<string>' },
];

const stateMethodRows = [
  { id: 1, method: 'toggleChecked', arguments: '—', return: 'void' },
];

const stateExample = `
<button vacCheckboxRoot #check="vacCheckboxRoot">
  <input vacCheckboxInput />
  @if (check.state.checked() === true) {
    <icon class="w-4 h-4 text-white" name="check"></icon>
  } @else if (check.state.checked() === 'indeterminate') {
    <icon class="w-4 h-4" name="minus"></icon>
  }
</button>
`

// ------ MODELS ------
const models = `
export type CheckboxValue = boolean | 'indeterminate';
export type CheckboxStatus = 'checked' | 'unchecked' | 'indeterminate';
`;

// ------ KEYBOARD ------
const keyboardColumns = [
  { header: 'Key', field: 'key' },
  { header: 'Description', field: 'description', widthFactor: 3 },
];

const keyboardRows = [
  { key: 'Space', description: 'Toggle the checkbox.' }
];
</script>

<template lang="md">

  A checkbox directive set that provides a flexible and accessible way to enhance form interactions, enabling full customization with indeterminate states and dynamic property bindings.

  <docs-example name="checkbox" />

  ## Installation
  Add and import the module into your imports section.

  ### Module
  <docs-code code="import { CheckboxPrimitivesModule } from '@vacui-kit/primitives/checkbox';" language="ts" />

  ### Standalone directives
  <docs-code code="import { CheckboxRootDirective, CheckboxInputDirective } from '@vacui-kit/primitives/checkbox';" language="ts" />

  # Anatomy
  Directive's set structure.

  <docs-anatomy [node]="componentStructure" />

  # Input props

  ## CheckboxRoot <docs-badge color="purple" text="Attribute directive" />
  The root directive for the checkbox. Handles the state, keyboard navigation and bindings.

  <docs-table [columns]="columnsInput" [rows]="rootInputRows" />
  
  <div class="mt-4">
    <docs-table [columns]="outputColumns" [rows]="rootOutputRows" />
  </div>

  <div class="mt-4">
    <docs-table [columns]="attributesColumns" [rows]="rootAttrRows" />
  </div>

  ## CheckboxInput <docs-badge color="purple" text="Attribute directive" />
  A directive to bind the state and the accessibility rules to the input element.

  <docs-table [columns]="attributesColumns" [rows]="itemAttrRows" />

  # State
  `CheckboxStateService` allows to control the inputs and toggle of the checkbox.

  ## Access directive API with exportAS
  We can access the state of the checkbox using a template variable. All the directives expose themself with the same name. We have access to the directive's attributes and also the `state` service.

  ### Example
  We could use it with any other directive. For example with `#check="vacCheckboxRoot"` and access the state.

  <docs-code [code]="stateExample" language="html" />

  ## State API - CheckboxStateService
  Documentation for the checkbox state service API.

  ### Variables
  <docs-table [columns]="stateVarsColumns" [rows]="stateRows" />

  ### Methods
  <docs-table [columns]="stateMethodsColumns" [rows]="stateMethodRows" />

  ## Types/Interfaces
  Avatar interfaces that you can import.

  <docs-code [code]="models" language="ts" />

  # Accessibility
  This checkbox set of directives is designed in accordance with the WAI-ARIA Authoring Practices Guide. For more details on accessibility features and guidelines, please refer to the [WAI-ARIA Checkbox Practices](https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/). This ensures our component meets modern accessibility standards, providing an inclusive user experience.

  ## Keyboard Navigation

  <docs-table [columns]="keyboardColumns" [rows]="keyboardRows" />
</template>
