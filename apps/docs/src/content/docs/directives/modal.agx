---
title: Modal
description: Set of Angular directives to build a dialog component using Vacui UI primitives.
group: Directives
slug: modal
---

<script lang="ts">
import { CodeHighlightComponent } from '../../../app/components/code/code.component' with { analog: 'imports' };
import { AnatomyComponent } from '../../../app/components/anatomy/anatomy.component' with { analog: 'imports' };
import { BadgeComponent } from '../../../app/components/badge/badge.component' with { analog: 'imports' };
import { TableComponent } from '../../../app/components/table/table.component' with { analog: 'imports' };
import { ExampleComponent } from '../../../app/components/example/example.component' with { analog: 'imports' };

// ------ ANATOMY ------
const componentStructure = {
  name: 'DialogRootDirective',
  children: [
    { name: 'vacDialogTrigger' },
    {
      name: '*vacPortal',
      children: [
        { name: '*vacDialogOverlay' },
        {
          name: '*vacDialogContent',
          children: [
            { name: 'vacDialogClose' },
            { name: 'vacDialogTitle' },
            { name: 'vacDialogDescription' }
          ]
        }
      ]
    }
  ]
};

// ------ COLUMNS ------
const columnsInput = [
  { header: 'Input', field: 'prop' },
  { header: 'Default', field: 'default' },
  { header: 'Type', field: 'type' },
  { header: 'Required', field: 'required' }
];

const outputColumns = [
  { header: 'Output', field: 'prop' },
  { header: 'Description', field: 'description' },
  { header: 'Returns', field: 'returns', widthFactor: 2  },
];

const attributesColumns = [
  { header: 'Attribute', field: 'attribute' },
  { header: 'Value', field: 'value', widthFactor: 3 },
];

const totalColumns = 4;

// ------ ROWS ROOT ------
const rootInputRows = [
  { id: 1, prop: 'open', default: 'false', type: 'boolean', required: 'false' },
  { id: 2, prop: 'modal', default: 'true', type: 'boolean', required: 'false' },
];

const rootOutputRows = [
  { id: 1, prop: 'openChange', description: 'Returns true if it is opened, false otherwise', returns: 'boolean' },
];

const rootAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' },
];

// ------ ROWS DIALOG TRIGGER ------
const triggerAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' }
];

// ------ ROWS PORTAL ------
const portalInputRows = [
  { id: 1, prop: 'vacPortal*', default: 'â€”', type: 'string | HTMLElement | null | "parent"', required: 'false' },
];

// ------ ROWS DIALOG OVERLAY ------
const overlayAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' },
];

// ------ ROWS DIALOG CONTENT ------
const contentOutputRows = [
  { id: 1, prop: 'pointerDownOutside', description: 'Event handler called when a pointer event occurs outside the bounds of the component.', returns: 'PointerEvent' },
  { id: 2, prop: 'focusOutside', description: 'Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component.', returns: 'FocusEvent' },
];

const contentAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' },
];

// ------ ROWS DIALOG CLOSE ------
const closeAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' },
];

// ------ ROWS DIALOG TITLE ------
const titleAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' },
];

// ------ ROWS DIALOG DESCRIPTION ------
const descriptionAttrRows = [
  { id: 1, attribute: 'data-state', value: '"open" | "closed"' },
];

// ------ STATE ------
const stateVarsColumns = [
  { header: 'Name', field: 'name' },
  { header: 'Type', field: 'type' },
  { header: 'Default', field: 'default' },
];

const stateMethodsColumns = [
  { header: 'Method', field: 'method' },
  { header: 'Arguments', field: 'arguments' },
  { header: 'Return', field: 'return' },
];

const stateRows = [
  { id: 1, name: 'open', default: 'false', type: 'Signal<boolean>'},
  { id: 2, name: 'modal', default: 'true', type: 'Signal<boolean>' },
  { id: 3, name: 'dataState', default: 'false', type: 'Signal<"open" | "closed">' },
];

const stateExample = `
  <div vacDialogRoot #root="vacDialogRoot">
    <button vacDialogTrigger>Open</button>
    <ng-container *vacPortal>
      <div *vacDialogContent>
        <h2 vacDialogTitle>Title</h2>
        Dialog is opened: {{ root.state.dateState }}
      </div>
    </ng-container>
  </div>
`;

// ------ KEYBOARD ------
const keyboardColumns = [
  { header: 'Key', field: 'key' },
  { header: 'Description', field: 'description', widthFactor: 3 },
];

const keyboardRows = [
  { key: 'Tab', description: 'Moves focus to the next focusable element.' },
  { key: 'Shift + Tab', description: 'Moves focus to the previous focusable element.' },
  { key: 'Space', description: 'Opens or closes the dialog.' },
  { key: 'Enter', description: 'Opens or closes the dialog.' },
  { key: 'Escape', description: 'Closes the dialog and moves focus to the trigger.' },
];

</script>

<template lang="md">

  A toolkit of Angular directives designed to construct a fully customizable and accessible dialog component.

  <docs-example name="dialog" />

  ## Installation
  Add and import the module into your imports section.

  <docs-code code="import { DialogPrimitivesModule } from '@vacui-kit/primitives/dialog';" language="shell" />
  
  Or

  <docs-code code="import { DialogRootDirective, DialogCloseDirective, DialogContentDirective, DialogDescriptionDirective, DialogOverlayDirective, DialogTitleDirective, DialogTriggerDirective } from '@vacui-kit/primitives/dialog/index';" language="shell" />

  # Anatomy
  Directive's set structure.

  <docs-anatomy [node]="componentStructure" />

  > Do not recommend to use directives directly in custom components tags. It will work, but the aria attributes will be set in the component tag instead than your HTML element withing your component.

  # Input props

  ## DialogRoot <docs-badge color="purple" text="Attribute" />
  The root directive for the dialog. Handles the state, configuration and keyboard navigation.

  <docs-table [columns]="columnsInput" [rows]="rootInputRows" />
  &nbsp;
  <docs-table [columns]="outputColumns" [rows]="rootOutputRows" />
  &nbsp;
  <docs-table [columns]="attributesColumns" [rows]="rootAttrRows" />

  ## DialogTrigger <docs-badge color="purple" text="Attribute directive" />
  The dialog trigger that opens the dialog.

  <docs-table [columns]="attributesColumns" [rows]="triggerAttrRows" />

  ## Portal <docs-badge text="Structural directive" />
  When used, portals send your content into the body.

  <docs-table [columns]="columnsInput" [rows]="portalInputRows" />

  ## DialogOverlay <docs-badge text="Structural directive" />
  A layer that covers the inert part of the view when the dialog is open.

  <docs-table [columns]="attributesColumns" [rows]="overlayAttrRows" />

  ## DialogContent <docs-badge color="purple" text="Attribute directive" />
  Contains content to be rendered in the open dialog.

  <docs-table [columns]="outputColumns" [rows]="contentOutputRows" />
  &nbsp;
  <docs-table [columns]="attributesColumns" [rows]="contentAttrRows" />

  ## DialogClose <docs-badge color="purple" text="Attribute directive" />
  The button trigger that closes the dialog.

  <docs-table [columns]="attributesColumns" [rows]="closeAttrRows" />

  ## DialogTitle <docs-badge color="purple" text="Attribute directive" />&nbsp;<docs-badge color="yellow" text="Optional" />
  An accessible title to be announced when the dialog is opened.

  <docs-table [columns]="attributesColumns" [rows]="titleAttrRows" />

  ## DialogDescription <docs-badge color="purple" text="Attribute directive" />&nbsp;<docs-badge color="yellow" text="Optional" />
  Description of the dialog.

  <docs-table [columns]="attributesColumns" [rows]="descriptionAttrRows" />

  # State
  `DialogStateService` injects an accordion state and exposes an API to interact with the items. Most of the time you wouldn't need it, but it is accessible within the template and it can be useful when we create a new directive or component to replace one of the current directives blocks. Each directive injects the root instance to handle the accordion accessibility and logic.

  ## Access directive API with exportAS
  We can access the state of the accordion using a template variable. All the directives expose themself with the same name, for example, in the previous demo we are using `#accItem="accordionItem"`. With `accItem` we have access to the directive's attributes and also the `state` service.

  ### Example
  We could use it with any other directive. For example with `#image="vacAvatarRoot"` and access the state.

  <docs-code [code]="stateExample" language="html" />

  ## State API - AccordionStateService
  Documentation for the accordion state service API.

  ### Variables
  <docs-table [columns]="stateVarsColumns" [rows]="stateRows" />

  # Accessibility
  This accordion component is designed in accordance with the WAI-ARIA Authoring Practices Guide. For more details on accessibility features and guidelines, please refer to the [WAI-ARIA Dialog Practices](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal). This ensures our component meets modern accessibility standards, providing an inclusive user experience.

  ## Keyboard Navigation
  Keyboard navigation uses an internal directive system to control the keyboard flow. You can read more about it in [KeyboardNavigationDirective](). `KeyboardNavigationDirective` props are extended directly in the `AccordionRoot` directive.

  <docs-table [columns]="keyboardColumns" [rows]="keyboardRows" />
</template>
